---
description: 
globs: *.actions.ts
alwaysApply: false
---
# Database Actions and Validation Patterns

## Server Actions Structure

All server actions should follow this pattern:

1. **Import Structure**
```typescript
"use server"
import { revalidatePath } from "next/cache"
import { getServerSession } from "next-auth/next"
import { authOptions } from "@/lib/auth/auth"
import { prisma } from "@/lib/auth/prisma"
import { z } from "zod"
```

2. **Validation Schemas**
Define Zod schemas for input validation:
```typescript
const inputSchema = z.object({
  field: z.string().min(1, "Field is required"),
  email: z.string().email("Valid email is required")
})
```

## Action Function Pattern

Every server action should follow this structure:

```typescript
export async function actionName(params: string) {
  try {
    // 1. Authentication check
    const session = await getServerSession(authOptions)
    if (!session) {
      throw new Error("Unauthorized")
    }

    // 2. Input validation
    const validation = inputSchema.safeParse({ params })
    if (!validation.success) {
      return { 
        success: false, 
        error: validation.error.errors.map(e => e.message).join(", ") 
      }
    }

    // 3. Database operation
    const result = await prisma.modelName.operation({
      // operation details
    })

    // 4. Revalidate if mutation
    revalidatePath("/relevant/path")
    
    // 5. Return success
    return { success: true, data: result }
  } catch (error) {
    console.error("Error in action:", error)
    return { success: false, error: "Operation failed" }
  }
}
```

## Database Model Naming

- Prisma schema uses PascalCase: `WhitelistedUser`
- Prisma client uses camelCase: `prisma.whitelistedUser`

## Error Handling

- Always wrap in try-catch
- Log errors with console.error
- Return structured error responses: `{ success: false, error: string }`
- Handle specific database errors (e.g., unique constraint violations)

## Authentication

All server actions must check authentication:
- Use `getServerSession(authOptions)` 
- Throw "Unauthorized" error if no session
- Reference: [auth.ts](mdc:app/lib/auth/auth.ts)

## Validation

- Use Zod for all input validation
- Use `safeParse()` to avoid throwing exceptions
- Return validation errors in user-friendly format
- For boolean functions, log validation errors and return false

## Examples

See [user.actions.ts](mdc:app/lib/actions/user.actions.ts) for complete implementation examples of:
- CRUD operations with validation
- Authentication checks
- Error handling patterns
- Path revalidation after mutations
