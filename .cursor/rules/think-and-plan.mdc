---
description: 
globs: 
alwaysApply: false
---
# AI Task Planning Rules and Guidelines

Ces règles sont conçues pour guider une IA dans la planification systématique de tâches complexes, en assurant clarté, traçabilité et exécution efficace.

## Principes Fondamentaux pour la Planification des Tâches par l'IA

Une fois le plan terminé l'agent IA demande la confirmation du plan avant de continuer.
Une fois le plan validé, l'agent IA execute le plan et met a jour la liste de tache au fur et a mesure qu'une tache est terminé.

### Comprendre et Décomposer

- **Analyser** : Avant de planifier, analyser en profondeur la tâche complexe pour comprendre tous ses composants, dépendances et objectifs.
- **Décomposer** : Décomposer la tâche complexe en une série de sous-tâches plus petites, distinctes et actionnables. Chaque sous-tâche doit représenter une unité de travail unique et bien définie.
- **Raffinement Itératif** : Si une sous-tâche semble encore trop grande ou ambiguë, la décomposer davantage jusqu'à ce qu'elle réponde aux critères "actionnables".

### Emplacement de Sortie et Convention de Nommage

- **Répertoire** : Tous les plans de tâches DOIVENT être stockés dans un répertoire dédié nommé `tasks/`.
- **Nommage des Fichiers** : Chaque fichier de plan de tâches DOIT être nommé en utilisant la fonctionnalité principale ou la tâche de haut niveau qu'il aborde, au format kebab-case (ex: `implement-user-authentication.md`, `develop-data-ingestion-pipeline.md`).

### Structure et Suivi des Tâches

- **Format Markdown** : Les fichiers de tâches DOIVENT être écrits en Markdown (`.md`).
- **Identifiants de Tâche Uniques** : Chaque sous-tâche individuelle dans le plan DOIT se voir attribuer un identifiant unique (ID). Un bon format est `[ABRÉVIATION_FONCTIONNALITÉ]-[NNN]` (ex: `AUTH-001`, `DATA-005`).
- **Liste de Tâches Vérifiables** : Chaque sous-tâche DOIT être présentée comme un élément de liste de vérification Markdown, permettant un suivi facile de la complétion.
- **Clarté et Actionnabilité** : Chaque description de sous-tâche DOIT être claire, concise et directement actionnable. Elle doit spécifier ce qui doit être fait, pas seulement un objectif vague.

### Granularité des Sous-Tâches

- **Actions Atomiques** : Viser des sous-tâches aussi atomiques que raisonnablement possible, ce qui signifie qu'elles représentent une pièce de travail unique et ciblée qui peut être complétée sans dépendances internes significatives.
- **Estimation de Temps (Implicite)** : Bien que non explicitement requise, une sous-tâche bien définie devrait idéalement être complétable dans un délai raisonnable et court (ex: quelques heures à une journée de travail dédié). Si une tâche semble prendre des jours, elle nécessite probablement une décomposition supplémentaire.

## Exemple de Structure de Plan de Tâches

Voici comment un fichier de tâches pour une fonctionnalité comme "Authentification Utilisateur" pourrait ressembler :

### Fonctionnalité : Authentification Utilisateur

Ce document décrit les tâches planifiées pour l'implémentation de l'authentification utilisateur, y compris l'inscription, la connexion et la gestion des sessions.

#### Liste de Tâches

- [ ] [AUTH-001] Concevoir le schéma de base de données pour la table des utilisateurs (ID, nom d'utilisateur, email, mot de passe_hash, créé_à)
- [ ] [AUTH-002] Implémenter l'endpoint API d'inscription utilisateur (`POST /api/register`)
- [ ] [AUTH-003] Hasher les mots de passe des utilisateurs de manière sécurisée avant stockage (ex: en utilisant bcrypt)
- [ ] [AUTH-004] Implémenter l'endpoint API de connexion utilisateur (`POST /api/login`)
- [ ] [AUTH-005] Générer et retourner un token JWT lors d'une connexion réussie
- [ ] [AUTH-006] Implémenter un middleware de validation de token pour les routes protégées
- [ ] [AUTH-007] Créer un endpoint API "Mot de Passe Oublié"
- [ ] [AUTH-008] Développer le formulaire d'inscription frontend
- [ ] [AUTH-009] Développer le formulaire de connexion frontend
- [ ] [AUTH-010] Implémenter le stockage côté client des tokens JWT (ex: cookies HttpOnly)
- [ ] [AUTH-011] Ajouter une validation de base des entrées aux formulaires d'inscription et de connexion (backend et frontend)
- [ ] [AUTH-012] Écrire des tests unitaires pour les endpoints API d'authentification
- [ ] [AUTH-013] Écrire des tests d'intégration pour le flux d'authentification
